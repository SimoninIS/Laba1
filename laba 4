#Метод отжига
#ПИД-регулятор

import math
import random
import control.matlab as ctr
import matplotlib.pyplot as plt
from sympy.codegen.tests.test_applications import np


def Fitness(W):
    time = list(np.linspace(0, 500, 10000))
    y, x = ctr.step(W, time)
    pererg = (y.max() - y[-1]) * 100 / y[-1]
    return pererg


def Func(kp, ki, kd):
    W1 = ctr.tf(1, [6, 1])  # Генератор
    W2 = ctr.tf(4, [4, 1])  # Паровая турбина
    W3 = ctr.tf(21, [6, 1])  # Усилительно-исполнительный орган
    W4 = W3 * W2 * W1
    Wpid = ctr.tf(kp, 1) + ctr.tf([0, ki], [1, 0]) + ctr.tf([kd, 0], 1)
    W5 = W4 * Wpid
    W6 = W5 / (1 + W5)
    return W6


def A(new):
    tmax = 10000
    tmin = 0.1
    cool = 0.9
    t = tmax * cool

    k1 = random.uniform(0.05, 0.06)
    k2 = random.uniform(0.008, 0.009)
    k3 = random.uniform(0.5, 0.6)
    ishod = Func(k1, k2, k3)
    print("Перерегулирование исходного состояния:", Fitness(ishod),"%")
    print("Перерегулирование сгенерированного состояния:", Fitness(new),"%")

    while t > tmin:
        print("\033[37;1mНовая Итерация\033[30;1m")
        delta = Fitness(ishod) - Fitness(new)
        if delta > 0 and Fitness(ishod) > 0 and Fitness(new) > 0:
            print("delta=",delta,", d>0")
            print("Перерегулирование исходного состояния:", Fitness(ishod),"%")
            print("Перерегулирование сгенерированного состояния:", Fitness(new),"%")
            k1 = random.uniform(0.05, 0.06)
            k2 = random.uniform(0.008, 0.009)
            k3 = random.uniform(0.5, 0.6)
            ishod = Func(k1, k2, k3)
            p = pow(math.e, -delta / t)
            if p > random.random() * 0.5:
                kp = k1
                ki = k2
                kd = k3
                t = t * cool
        elif delta < 0 and Fitness(ishod) > 0 and Fitness(new) > 0:
            print("delta=", delta, ", d<0")
            print("Перерегулирование исходного состояния:", Fitness(ishod), "%")
            print("Перерегулирование сгенерированного состояния:", Fitness(new), "%")
            print("температура  ", t)
            k1 = random.uniform(0.05, 0.06)
            k2 = random.uniform(0.008, 0.009)
            k3 = random.uniform(0.5, 0.6)
            new = Func(k1, k2, k3)
            kp = k1
            ki = k2
            kd = k3
            t = t * cool
        else:
            if Fitness(ishod) <= 0:
                print("Исходное состояние меньше нуля:", Fitness(ishod))
                k1 = random.uniform(0.05, 0.06)
                k2 = random.uniform(0.008, 0.009)
                k3 = random.uniform(0.5, 0.6)
                pred = Func(k1, k2, k3)
                print("Предыдущее состояние новое:", Fitness(ishod))
            if Fitness(new) <= 0:
                print("Сгенерированное состояние меньше нуля:", Fitness(new))
                k1 = random.uniform(0.05, 0.06)
                k2 = random.uniform(0.08, 0.009)
                k3 = random.uniform(0.5, 0.6)
                new = Func(k1, k2, k3)
                print("Сгенерированное состояние новое:", Fitness(new))

    print("Полученные коэффициенты: kp = ",kp, "kd = ", kd, "ki = ", ki )

W = Func(0.637, 0.0099, 0.08095)
A(W)

#ПД-регулятор

import math
import random
import control.matlab as ctr
import matplotlib.pyplot as plt
from sympy.codegen.tests.test_applications import np


def Fitness(W):
    time = list(np.linspace(0, 500, 10000))
    y, x = ctr.step(W, time)
    pererg = (y.max() - y[-1]) * 100 / y[-1]
    return pererg


def Func(kp, kd):
    W1 = ctr.tf(1, [6, 1])  # Генератор
    W2 = ctr.tf(4, [4, 1])  # Паровая турбина
    W3 = ctr.tf(21, [6, 1])  # Усилительно-исполнительный орган
    W4 = W3 * W2 * W1
    Wpid = ctr.tf(kp, 1) + ctr.tf([kd, 0], 1)
    W5 = W4 * Wpid
    W6 = W5 / (1 + W5)
    return W6


def A(new):
    tmax = 10000
    tmin = 0.1
    cool = 0.9
    t = tmax * cool

    k1 = random.uniform(0.3, 0.35)
    k2 = random.uniform(1.5, 1.55)
    ishod = Func(k1, k2)
    print("Перерегулирование исходного состояния:",Fitness(ishod),"%")
    print("Перерегулирование сгенерированного состояния:",Fitness(new),"%")

    while t > tmin:
        print("\033[37;1mНовая Итерация\033[30;1m")
        delta = Fitness(ishod) - Fitness(new)
        if delta > 0 and Fitness(ishod) > 0 and Fitness(new) > 0:
            print("delta=",delta, ", d>0")
            print("Перерегулирование исходного состояния:", Fitness(ishod),"%")
            print("Перерегулирование сгенерированного состояния:", Fitness(new),"%")
            k1 = random.uniform(0.3, 0.35)
            k2 = random.uniform(1.5, 1.55)
            ishod =  Func(k1, k2)
            p = pow(math.e, -delta / t)
            if p > random.random() * 0.5:
                kp = k1
                kd = k2
                t = t * cool
        elif delta < 0 and Fitness(ishod) > 0 and Fitness(new) > 0:
            print("delta=",delta,", d<0")
            print("Перерегулирование исходного состояния:", Fitness(ishod),"%")
            print("Перерегулирование сгенерированного состояния:", Fitness(new),"%")
            print("температура  ", t)
            k1 = random.uniform(0.3, 0.35)
            k2 = random.uniform(1.5, 1.55)
            new = Func(k1, k2)
            kp = k1
            kd = k2
            t = t * cool
        else:
            if Fitness(ishod) <= 0:
                print("Исходное состояние меньше нуля:", Fitness(ishod))
                k1 = random.uniform(0.3, 0.35)
                k2 = random.uniform(1.5, 1.55)
                pred = Func(k1, k2)
                print("Предыдущее состояние новое:", Fitness(ishod))
            if Fitness(new) <= 0:
                print("Сгенерированное состояние меньше нуля:", Fitness(new))
                k1 = random.uniform(0.3, 0.35)
                k2 = random.uniform(1.5, 1.55)
                new = ContrSys(k1, k2)
                print("Сгенерированное состояние новое:", Fitness(new))

    print("Полученные коэффициенты: kp = ",kp, "kd = ", kd)


W = Func(0.3, 1.5)
A(W)

#Оценка показателей качества
import math
import control.matlab as con
from control.matlab import *
import control.matlab as c
import matplotlib.pyplot as plt
import numpy as np


def Lab3(W1, W2, W3, W4):
    Wsum = W1 * W2 * W3 * W4
    W = Wsum / (1 + Wsum)
    print("\nПередаточная функция замкнутой САУ - ", W)
    timeline = [i for i in np.arange(0, 100, 0.4)]   # генератор списка
    y1, x1 = step(W, timeline)
    maxy = 0
    maxx = 0
    for i in range(0, len(y1)):                                         # Максимум
        if y1[i] > maxy:
            maxy = y1[i]
            maxx = x1[i]
    plt.plot(maxx, maxy, '-x')
    xx1, yy1 = [maxx, maxx], [maxy, 0]
    plt.plot(xx1, yy1, "purple", linestyle='-.', linewidth=1)

    infinityy = 0
    for i in range(0, len(y1)):
        if abs(y1[i] - infinityy) > 0.0001:
            infinityy = y1[i]
    print("Установившееся значение функции - ", infinityy)

    y2 = []
    x2 = []
    for i in range(0, 50, 1):
        highgr = 1.05 * infinityy
        y2.append(highgr)
    for i in range(0, 50, 1):
        x2.append(i)
    y3 = []
    x3 = []
    lowgr = 0.95 * infinityy
    for i in range(0, 50, 1):
        y3.append(lowgr)
    for i in range(0, 50, 1):
        x3.append(i)
    plt.plot(x1, y1, "r")
    plt.plot(x2, y2, "b", linestyle='--', linewidth=1.5)
    plt.plot(x3, y3, "b", linestyle='--', linewidth=1.5)

    ppx = []
    ppy = []
    for g in range(0, len(y1)):                                     # Время ПП
        if (y1[g] - lowgr) < 0.001:
            pptime = x1[g]
            ppygrek = y1[g]
            ppx, ppy = [pptime, pptime], [y1[g], 0]
    plt.plot(pptime, ppygrek, '-o')
    plt.plot(ppx, ppy, "green", linestyle='-.', linewidth=1)
    plt.title("Переходная функция замкнутой системы")
    plt.xlabel("Время, с")
    plt.ylabel("Амплитуда")
    plt.grid(True)
    plt.show()

    aS = pole(W)
    print("\nПолюса - %s" % aS)
    pzmap(W)
    plt.title("Расположение полюсов на комплексной плоскости")
    plt.grid(True)
    plt.show()

    #magR, phaseR, omegaR = bode(Wsum, dB=True)
    magZ, phaseZ, omegaZ = bode(W, dB=False)
    plt.show()


    'ПРЯМЫЕ МЕТОДЫ ОЦЕНКИ'
    print("\n\033[36;3mПРЯМЫЕ МЕТОДЫ ОЦЕНКИ\033[30;1m")
    print("\033[34;1mВремя переходного процесса - ", pptime, " c\033[30;1m")
    delta = (maxy - infinityy) / infinityy * 100                                    #Перерегулирование
    print("\033[34;1mПерегулирование - ", delta, " %\033[30;1m")
    N = 0
    A = []
    for y in range(0, len(y1)):
        if x1[y] < pptime and y1[y - 1] < y1[y] > y1[y + 1]:
            N += 1
            A.append(y1[y])
    print("Колебательность (N) - ", N)
    print("\033[37;1mA1 = ", A[0])
    if len(A) > 1:
        Y = 1 - (A[1] / A[0])                   #степень затухания
        print("\033[37;1mA2 = ", A[1], "\033[30;1m\nСтепень затухания (Y) - ", Y)
    else:
        print("\033[37;1mA2 = 0", "\033[30;1m\nВторого максимума нет, степень затухания равна единице")
    print("\033[37;1mМаксимум функции - ", maxy, "\nВремя достижения максимума - ", maxx, " c\033[30;1m")

    'МЕТОДЫ ОЦЕНКИ ПО КОРНЯМ'
    print("\n\033[36;3mМЕТОДЫ ОЦЕНКИ ПО КОРНЯМ\033[30;1m")
    amin = 0
    for i in range(0, len(aS)):
        if 0 > aS[i].real > aS[i - 1].real:
            amin = aS[i].real
            tpp = 3 / abs(amin)                                             #время регклирования
        if 0 > aS[i].real < aS[i - 1].real and aS[i].imag != 0:
            amax = aS[i].real
            jwmax = aS[i].imag
            mu = abs(jwmax / amax)                                          #колебательность
            if mu > 0.01:
                sigma = math.exp(math.pi / mu)                              #перерегулирование
            else:
                print("Мю оч маленькое, сигма не расчитывается")
            psi = 1 - math.exp(-(2 * math.pi / mu))                         #степень затухания
            m=1/mu                                                          #показатель колебательности

    print("\033[37;1mamin = ", amin)
    print("\033[34;1mВремя переходного процесса - ", tpp, " c\033[30;1m")
    print("\033[37;1mamax = ", amax, "\njwmax = ", jwmax)
    print("\033[30;1mСтепень колебательности (μ) - ", mu, "\033[30;1m")
    print("\033[30;1mПеререгулирование переходной характеристики (σ) - ", sigma, "\033[30;1m")
    print("Степень затухания (Ψ) - ", psi)
    print("Показатель колебательности (m) - ", m)

    'ПО ЛОГАРИФМИЧЕСКИМ ХАРАКТЕРИСТИКАМ'
    print("\n\033[36;3mМЕТОДЫ ОЦЕНКИ ПО ЛОГАРИФМИЧЕСКИМ ХАРАКТЕРИСТИКАМ\033[30;1m")
    Amax = 0
    for i in range(0, len(magZ)):
        if abs(magZ[i] - magZ[0]) < 0.05:
            omegasr = omegaZ[i]
        if magZ[i] > Amax:
            Amax = magZ[i]
    print("\033[37;1mЧастота среза (ωср) - ", omegasr)
    print("\033[37;1mМаксимальное значение АЧХ (Amax) - ", Amax)
    tp1 = 1 * (2 * math.pi) / omegasr                                                       #время регулярования при 1
    tp2 = 2 * (2 * math.pi) / omegasr                                                       #время регулирования при 2
    print("\033[34;1mВремя переходного процесса - (", tp1, " - ", tp2, ") c")
    M = Amax / magZ[0]                                                                      #Показатель колебательности
    print("\033[30;1mПоказатель колебательности (M) - ", M)

    'ИНТЕГРАЛЬНЫЕ ОЦЕНКИ КАЧЕСТВА'
    print("\n\033[36;3mИНТЕГРАЛЬНЫЕ ОЦЕНКИ КАЧЕСТВА\033[30;1m")
    integralen = 0
    for i in range(0, len(y1)):
        de = infinityy - y1[i]
        integralen = integralen + de
    print("Интеграл равен - ", integralen)

    'ИТОГ'
    print("\n\n\033[36;3mИТОГ\033[30;1m")
    if pptime <= 12:
        print("\033[30;1mЗначение времени переходного процесса является удовлетворительным", "(", pptime,
              "c)\033[30;1m")
    elif 15 > pptime > 12.1:
        print("\033[33;1mЗначение времени переходного процесса является почти удовлетворительным", "(", pptime,
              "c)\033[30;1m")
    else:
        print("\033[31;1mЗначение времени переходного процесса не является удовлетворительным", "(", pptime,
              "c)\033[30;1m")

    if delta < 24:
        print("\033[30;1mЗначение перерегулирования является удовлетворительным", "(", delta, "%)\033[30;1m")
    elif 33 > delta > 24:
        print("\033[33;1mЗначение перерегулирования является почти удовлетворительным", "(", delta, "%)\033[30;1m")
    else:
        print("\033[31;1mЗначение перерегулирования не является удовлетворительным", "(", delta, "%)\033[30;1m")

    if M < 1.19:
        print("\033[30;1mЗначение показателя колебательности является удовлетворительным", "(", M, ")\033[30;1m")
    elif 2.0 > M > 1.19:
        print("\033[33;1mЗначение показателя колебательности является почти удовлетворительным", "(", M, ")\033[30;1m")
    else:
        print("\033[31;1mЗначение показателя колебательности не является удовлетворительным", "(", M, ")\033[30;1m")


#Lab3(c.tf([1], [6, 1]), c.tf([4], [4, 1]), c.tf([21], [6, 1]), c.tf([50.44111, 0.186915, 0.0066556], [1, 0]))    # ПИД Кд Кп Ки СHR
Lab3(c.tf([1], [6, 1]), c.tf([4], [4, 1]), c.tf([21], [6, 1]), c.tf([0.5921074751640942, 0.05145262316183017, 0.008935979002242807], [1, 0])) # ПИД ОТЖИГ
#Lab3(c.tf([1], [6, 1]), c.tf([4], [4, 1]), c.tf([21], [6, 1]), c.tf([244.2, 0.1181], [1]))  # ПД    Кд Кп
#Lab3(c.tf([1], [6, 1]), c.tf([4], [4, 1]), c.tf([21], [6, 1]), c.tf([1.5413725309470765, 0.34484594302069127], [1]))  # ПД  Отжиг
